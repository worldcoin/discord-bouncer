import path from "path";
import { awscdk, javascript, TextFile } from "projen";
import { ReactTypeScriptProject } from "projen/lib/web";

import { configureESLint, eslintOptions } from "./projenrc/eslint";
import { configureGitHooks } from "./projenrc/git-hooks";
import { configureGitHubIntegration, githubOptions } from "./projenrc/github";
import { configureJest, jestOptions } from "./projenrc/jest";
import { configurePrettier, prettierOptions } from "./projenrc/prettier";
import { configureVSCode } from "./projenrc/vscode";

/** @see {@link https://projen.io/api/API.html#projen-awscdk-awscdktypescriptapp} */

const typescriptVersion = "^4.7";

const project = new awscdk.AwsCdkTypeScriptApp({
  name: "World ID Discord Bot",
  description:
    "Demo bot for verification via Worldcoin ID on a discord channel",
  packageName: "world-id-discord-bot",
  license: "MIT",
  copyrightOwner: "Tools for Humanity Corporation",
  packageManager: javascript.NodePackageManager.NPM,
  projenrcTs: true,
  defaultReleaseBranch: "main",
  cdkVersion: "2.28.1",
  constructsVersion: "10.1.42",
  typescriptVersion,
  minNodeVersion: "16.14.0", // this version is on AWS Lambda Node 16.x runtime
  appEntrypoint: "app.ts",
  context: {
    roles_for_verified_user: "Verified human",
    signal: "<none>", // this should be the user's Discord ID
    action_id: "wid_fb74a74cc94d3ffbe3f6669f556b36e4",
    app_name: "World ID Discord Bot",
    bot_public_key:
      "aa4f7f5e1affd2c054ca07a2733007d44775826c821f6c0ddc3d3826a54eeb1a",
    bot_app_id: "984381699360161823",
  },
  githubOptions,
  jestOptions,
  eslintOptions,
  prettier: true,
  prettierOptions,
  vscode: true,
  lambdaAutoDiscover: false,
  edgeLambdaAutoDiscover: false,
  deps: [
    "@aws-sdk/client-secrets-manager",
    "@aws-sdk/client-eventbridge",
    "@discordjs/builders",
    "@discordjs/rest",
    "@walletconnect/client",
    "discord-api-types",
    "parse-data-url",
    "qrcode",
    "tweetnacl",
    "canvas",
    "qr-code-styling-node",
    "@ethersproject/bytes",
    "node-fetch@^3",
    "js-sha3",
  ],
  devDeps: [
    "@types/aws-lambda",
    "tsconfig-paths",
    "@types/qrcode",
    "@types/parse-data-url",
  ],
  tsconfig: {
    compilerOptions: {
      target: "es2022",
      lib: ["ES2022"],
      noEmit: true,
      skipLibCheck: true,
      baseUrl: ".",
      paths: {
        "@/*": ["./src/*"],
        "~/*": ["./*"],
      },
    },
  },
});

// Add generated files to prettier ignore
project.prettier?.ignoreFile?.addPatterns(
  ".eslintrc.json",
  ".github/pull_request_template.md",
  ".vscode/settings.json",
  "cdk.json",
  ".prettierrc.json",
  "tsconfig.*",
);
project.gitignore.addPatterns(".DS_Store");

// Add ts-node settings to tsconfig
for (const tsconfig of [project.tsconfig, project.tsconfigDev]) {
  tsconfig?.file.addOverride("ts-node", {
    preferTsExts: true,
    experimentalResolver: true,
    experimentalSpecifierResolution: "node",
    ignoreDiagnostics: [6133],
    require: ["tsconfig-paths/register"],
  });
}

// Remove projen CDK bundle
project.cdkConfig.json.addDeletionOverride("build");
project.tasks.removeTask("bundle");

// Creating .npmrc
new TextFile(project, ".npmrc", {
  lines: [
    '# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    "audit=false",
    "fund=false",
    "loglevel=error",
    "engine-strict=true",
    "send-metrics=false",
    "legacy-peer-deps=true",
  ],
});

configureGitHooks(project); // should be on top as other extends lint-staged config
configureGitHubIntegration(project);
configureVSCode(project);
configureESLint(project);
configurePrettier(project);
configureJest(project);

const landingPageProject = new ReactTypeScriptProject({
  parent: project,
  name: "Landing page frontend",
  packageName: "landing-page",
  defaultReleaseBranch: "main",
  packageManager: javascript.NodePackageManager.NPM,
  github: false,
  outdir: path.join(project.srcdir, "landing-page"),
  typescriptVersion,
  licensed: false,
  depsUpgrade: false,
  readme: { filename: ".gitignore" /* prevent creating README.md */ },
});

landingPageProject.addDevDeps("tailwindcss", "postcss", "autoprefixer");
landingPageProject.addDeps("react-router-dom");
landingPageProject.addDeps("classnames");

landingPageProject
  .tryFindObjectFile("package.json")
  ?.addOverride("eslintConfig.root", true);
landingPageProject.synth();

project.synth();
